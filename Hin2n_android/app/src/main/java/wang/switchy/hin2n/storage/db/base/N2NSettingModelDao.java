package wang.switchy.hin2n.storage.db.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import wang.switchy.hin2n.storage.db.base.model.N2NSettingModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "N2NSettingList".
*/
public class N2NSettingModelDao extends AbstractDao<N2NSettingModel, Long> {

    public static final String TABLENAME = "N2NSettingList";

    /**
     * Properties of entity N2NSettingModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Version = new Property(1, int.class, "version", false, "VERSION");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Ip = new Property(3, String.class, "ip", false, "IP");
        public final static Property Netmask = new Property(4, String.class, "netmask", false, "NETMASK");
        public final static Property Community = new Property(5, String.class, "community", false, "COMMUNITY");
        public final static Property Password = new Property(6, String.class, "password", false, "PASSWORD");
        public final static Property DevDesc = new Property(7, String.class, "devDesc", false, "DEV_DESC");
        public final static Property SuperNode = new Property(8, String.class, "superNode", false, "SUPER_NODE");
        public final static Property MoreSettings = new Property(9, boolean.class, "moreSettings", false, "MORE_SETTINGS");
        public final static Property SuperNodeBackup = new Property(10, String.class, "superNodeBackup", false, "SUPER_NODE_BACKUP");
        public final static Property MacAddr = new Property(11, String.class, "macAddr", false, "MAC_ADDR");
        public final static Property Mtu = new Property(12, int.class, "mtu", false, "MTU");
        public final static Property LocalIP = new Property(13, String.class, "localIP", false, "LOCAL_IP");
        public final static Property HolePunchInterval = new Property(14, int.class, "holePunchInterval", false, "HOLE_PUNCH_INTERVAL");
        public final static Property ResoveSupernodeIP = new Property(15, boolean.class, "resoveSupernodeIP", false, "RESOVE_SUPERNODE_IP");
        public final static Property LocalPort = new Property(16, int.class, "localPort", false, "LOCAL_PORT");
        public final static Property AllowRouting = new Property(17, boolean.class, "allowRouting", false, "ALLOW_ROUTING");
        public final static Property DropMuticast = new Property(18, boolean.class, "dropMuticast", false, "DROP_MUTICAST");
        public final static Property UseHttpTunnel = new Property(19, boolean.class, "useHttpTunnel", false, "USE_HTTP_TUNNEL");
        public final static Property TraceLevel = new Property(20, int.class, "traceLevel", false, "TRACE_LEVEL");
        public final static Property IsSelcected = new Property(21, boolean.class, "isSelcected", false, "IS_SELCECTED");
        public final static Property GatewayIp = new Property(22, String.class, "gatewayIp", false, "GATEWAY_IP");
        public final static Property DnsServer = new Property(23, String.class, "dnsServer", false, "DNS_SERVER");
        public final static Property EncryptionMode = new Property(24, String.class, "encryptionMode", false, "ENCRYPTION_MODE");
    }


    public N2NSettingModelDao(DaoConfig config) {
        super(config);
    }
    
    public N2NSettingModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"N2NSettingList\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VERSION\" INTEGER NOT NULL ," + // 1: version
                "\"NAME\" TEXT," + // 2: name
                "\"IP\" TEXT," + // 3: ip
                "\"NETMASK\" TEXT," + // 4: netmask
                "\"COMMUNITY\" TEXT," + // 5: community
                "\"PASSWORD\" TEXT," + // 6: password
                "\"DEV_DESC\" TEXT," + // 7: devDesc
                "\"SUPER_NODE\" TEXT," + // 8: superNode
                "\"MORE_SETTINGS\" INTEGER NOT NULL ," + // 9: moreSettings
                "\"SUPER_NODE_BACKUP\" TEXT," + // 10: superNodeBackup
                "\"MAC_ADDR\" TEXT," + // 11: macAddr
                "\"MTU\" INTEGER NOT NULL ," + // 12: mtu
                "\"LOCAL_IP\" TEXT," + // 13: localIP
                "\"HOLE_PUNCH_INTERVAL\" INTEGER NOT NULL ," + // 14: holePunchInterval
                "\"RESOVE_SUPERNODE_IP\" INTEGER NOT NULL ," + // 15: resoveSupernodeIP
                "\"LOCAL_PORT\" INTEGER NOT NULL ," + // 16: localPort
                "\"ALLOW_ROUTING\" INTEGER NOT NULL ," + // 17: allowRouting
                "\"DROP_MUTICAST\" INTEGER NOT NULL ," + // 18: dropMuticast
                "\"USE_HTTP_TUNNEL\" INTEGER NOT NULL ," + // 19: useHttpTunnel
                "\"TRACE_LEVEL\" INTEGER NOT NULL ," + // 20: traceLevel
                "\"IS_SELCECTED\" INTEGER NOT NULL ," + // 21: isSelcected
                "\"GATEWAY_IP\" TEXT," + // 22: gatewayIp
                "\"DNS_SERVER\" TEXT," + // 23: dnsServer
                "\"ENCRYPTION_MODE\" TEXT);"); // 24: encryptionMode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"N2NSettingList\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, N2NSettingModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVersion());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(4, ip);
        }
 
        String netmask = entity.getNetmask();
        if (netmask != null) {
            stmt.bindString(5, netmask);
        }
 
        String community = entity.getCommunity();
        if (community != null) {
            stmt.bindString(6, community);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String devDesc = entity.getDevDesc();
        if (devDesc != null) {
            stmt.bindString(8, devDesc);
        }
 
        String superNode = entity.getSuperNode();
        if (superNode != null) {
            stmt.bindString(9, superNode);
        }
        stmt.bindLong(10, entity.getMoreSettings() ? 1L: 0L);
 
        String superNodeBackup = entity.getSuperNodeBackup();
        if (superNodeBackup != null) {
            stmt.bindString(11, superNodeBackup);
        }
 
        String macAddr = entity.getMacAddr();
        if (macAddr != null) {
            stmt.bindString(12, macAddr);
        }
        stmt.bindLong(13, entity.getMtu());
 
        String localIP = entity.getLocalIP();
        if (localIP != null) {
            stmt.bindString(14, localIP);
        }
        stmt.bindLong(15, entity.getHolePunchInterval());
        stmt.bindLong(16, entity.getResoveSupernodeIP() ? 1L: 0L);
        stmt.bindLong(17, entity.getLocalPort());
        stmt.bindLong(18, entity.getAllowRouting() ? 1L: 0L);
        stmt.bindLong(19, entity.getDropMuticast() ? 1L: 0L);
        stmt.bindLong(20, entity.getUseHttpTunnel() ? 1L: 0L);
        stmt.bindLong(21, entity.getTraceLevel());
        stmt.bindLong(22, entity.getIsSelcected() ? 1L: 0L);
 
        String gatewayIp = entity.getGatewayIp();
        if (gatewayIp != null) {
            stmt.bindString(23, gatewayIp);
        }
 
        String dnsServer = entity.getDnsServer();
        if (dnsServer != null) {
            stmt.bindString(24, dnsServer);
        }
 
        String encryptionMode = entity.getEncryptionMode();
        if (encryptionMode != null) {
            stmt.bindString(25, encryptionMode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, N2NSettingModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVersion());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(4, ip);
        }
 
        String netmask = entity.getNetmask();
        if (netmask != null) {
            stmt.bindString(5, netmask);
        }
 
        String community = entity.getCommunity();
        if (community != null) {
            stmt.bindString(6, community);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(7, password);
        }
 
        String devDesc = entity.getDevDesc();
        if (devDesc != null) {
            stmt.bindString(8, devDesc);
        }
 
        String superNode = entity.getSuperNode();
        if (superNode != null) {
            stmt.bindString(9, superNode);
        }
        stmt.bindLong(10, entity.getMoreSettings() ? 1L: 0L);
 
        String superNodeBackup = entity.getSuperNodeBackup();
        if (superNodeBackup != null) {
            stmt.bindString(11, superNodeBackup);
        }
 
        String macAddr = entity.getMacAddr();
        if (macAddr != null) {
            stmt.bindString(12, macAddr);
        }
        stmt.bindLong(13, entity.getMtu());
 
        String localIP = entity.getLocalIP();
        if (localIP != null) {
            stmt.bindString(14, localIP);
        }
        stmt.bindLong(15, entity.getHolePunchInterval());
        stmt.bindLong(16, entity.getResoveSupernodeIP() ? 1L: 0L);
        stmt.bindLong(17, entity.getLocalPort());
        stmt.bindLong(18, entity.getAllowRouting() ? 1L: 0L);
        stmt.bindLong(19, entity.getDropMuticast() ? 1L: 0L);
        stmt.bindLong(20, entity.getUseHttpTunnel() ? 1L: 0L);
        stmt.bindLong(21, entity.getTraceLevel());
        stmt.bindLong(22, entity.getIsSelcected() ? 1L: 0L);
 
        String gatewayIp = entity.getGatewayIp();
        if (gatewayIp != null) {
            stmt.bindString(23, gatewayIp);
        }
 
        String dnsServer = entity.getDnsServer();
        if (dnsServer != null) {
            stmt.bindString(24, dnsServer);
        }
 
        String encryptionMode = entity.getEncryptionMode();
        if (encryptionMode != null) {
            stmt.bindString(25, encryptionMode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public N2NSettingModel readEntity(Cursor cursor, int offset) {
        N2NSettingModel entity = new N2NSettingModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // version
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ip
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // netmask
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // community
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // password
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // devDesc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // superNode
            cursor.getShort(offset + 9) != 0, // moreSettings
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // superNodeBackup
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // macAddr
            cursor.getInt(offset + 12), // mtu
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // localIP
            cursor.getInt(offset + 14), // holePunchInterval
            cursor.getShort(offset + 15) != 0, // resoveSupernodeIP
            cursor.getInt(offset + 16), // localPort
            cursor.getShort(offset + 17) != 0, // allowRouting
            cursor.getShort(offset + 18) != 0, // dropMuticast
            cursor.getShort(offset + 19) != 0, // useHttpTunnel
            cursor.getInt(offset + 20), // traceLevel
            cursor.getShort(offset + 21) != 0, // isSelcected
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // gatewayIp
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // dnsServer
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // encryptionMode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, N2NSettingModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVersion(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNetmask(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommunity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassword(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDevDesc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSuperNode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMoreSettings(cursor.getShort(offset + 9) != 0);
        entity.setSuperNodeBackup(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMacAddr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMtu(cursor.getInt(offset + 12));
        entity.setLocalIP(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHolePunchInterval(cursor.getInt(offset + 14));
        entity.setResoveSupernodeIP(cursor.getShort(offset + 15) != 0);
        entity.setLocalPort(cursor.getInt(offset + 16));
        entity.setAllowRouting(cursor.getShort(offset + 17) != 0);
        entity.setDropMuticast(cursor.getShort(offset + 18) != 0);
        entity.setUseHttpTunnel(cursor.getShort(offset + 19) != 0);
        entity.setTraceLevel(cursor.getInt(offset + 20));
        entity.setIsSelcected(cursor.getShort(offset + 21) != 0);
        entity.setGatewayIp(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDnsServer(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setEncryptionMode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(N2NSettingModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(N2NSettingModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(N2NSettingModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
